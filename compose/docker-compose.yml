
# version: '3.8'

########## Extension fields ##########

x-logging:
  &graylog-logging
  driver: gelf
  options:
    gelf-address: ${FP_GRAYLOG_GELF_INPUT:-udp://localhost:12201}

########## Services ##########
services:

  ######### Dozzle #########
  dozzle:
    container_name: dozzle
    profiles:
      - dozzle
      - dev
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    network_mode: "host"

  ######### Postgres ##########
  postgres:
    container_name: postgres
    profiles:
      - backend
      - dev
    image: postgres:15.0
    environment:
      - POSTGRES_USER=${FP_POSTGRES_USER:-backend_db_user}
      - POSTGRES_PASSWORD=${FP_POSTGRES_PASSWORD:-changeme}
      - POSTGRES_DB=${FP_POSTGRES_DB:-backend_db}
    volumes:
      - ../postgres/data/webapi:/var/lib/postgresql/data
    network_mode: "host"
    logging: *graylog-logging

  postgres-api-test:
    container_name: postgres-api-test
    profiles:
      - dev
      - api-tests
    image: postgres:15.0
    command: -p 5433
    environment:
      - POSTGRES_USER=${FP_POSTGRES_USER:-backend_db_user}
      - POSTGRES_PASSWORD=${FP_POSTGRES_PASSWORD:-changeme}
      - POSTGRES_DB=${FP_POSTGRES_TEST_DB:-backend_test_db}
    network_mode: "host"
    logging: *graylog-logging

  postgres-e2e-test:
    container_name: postgres-e2e-test
    profiles:
      - e2e-tests
    image: postgres:15.0
    command: -p 5434
    environment:
      - POSTGRES_USER=${FP_POSTGRES_USER:-backend_db_user}
      - POSTGRES_PASSWORD=${FP_POSTGRES_PASSWORD:-changeme}
      - POSTGRES_DB=${FP_POSTGRES_TEST_DB:-e2e_test_db}
    network_mode: "host"
    logging: *graylog-logging

  ########## frontend ##########
  nginx:
    container_name: nginx
    image: nginx
    profiles:
      - frontend
      - e2e-tests
    build:
      context: ../webapp
    environment:
      - NGINX_DOMAIN_NAME=${FP_DOMAIN_NAME:-fullplate.local}
      - NGINX_PROXY_WEBAPI=${FP_PROXY_WEBAPI:-localhost}
      - NGINX_PROXY_HTTP_PORT=${FP_PROXY_HTTP_PORT:-10080}
      - NGINX_PROXY_GRAYLOG=${FP_PROXY_GRAYLOG:-localhost}
      - NGINX_PROXY_GRAFANA=${FP_PROXY_GRAFANA:-localhost}
      - NGINX_PROXY_KEYCLOAK=${FP_PROXY_KEYCLOAK:-fullplate.local}
      - NGINX_ADMIN_IP=${FP_ADMIN_IP:-127.0.0.1}
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro,z
      - ../nginx/templates:/etc/nginx/templates
      - ../nginx/certbot/www/:/var/www/certbot/:ro
      - ../nginx/certbot/letsencrypt/:/etc/letsencrypt/:ro
      - ../nginx/certbot/own_ca_certs:/own_ca_certs:ro
    network_mode: "host"
    logging: *graylog-logging

  certbot:
    container_name: certbot
    image: certbot
    build:
      context: ../nginx/certbot
    profiles:
      - certbot
    environment:
      - CERTBOT_DOMAIN_NAME=${FP_DOMAIN_NAME:-fullplate.local}
    volumes:
      - ../nginx/certbot/www/:/var/www/certbot/:rw
      - ../nginx/certbot/letsencrypt/:/etc/letsencrypt/:rw
    network_mode: "host"
    logging: *graylog-logging

  nginx-dev:
    container_name: nginx-dev
    profiles:
      - dev
    image: nginx:1.22.0
    environment:
      - NGINX_DOMAIN_NAME=${FP_DOMAIN_NAME:-fullplate.local}
      - NGINX_PROXY_WEBAPI=${FP_PROXY_WEBAPI:-localhost}
      - NGINX_PROXY_GRAYLOG=${FP_PROXY_GRAYLOG:-localhost}
      - NGINX_PROXY_GRAFANA=${FP_PROXY_GRAFANA:-localhost}
      - NGINX_PROXY_KEYCLOAK=${FP_PROXY_KEYCLOAK:-fullplate.local}
      - NGINX_MONITORING_ALLOW=${FP_MONITORING_ALLOW:-allow 127.0.0.1;}
    volumes:
      - ../nginx/nginx.dev.conf:/etc/nginx/nginx.conf:ro,z
      - ../nginx/templates:/etc/nginx/templates
      - ../nginx/certbot/www/:/var/www/certbot/:ro
      - ../nginx/certbot/letsencrypt/:/etc/letsencrypt/:ro
      - ../nginx/certbot/own_ca_certs:/own_ca_certs:ro
    network_mode: "host"
    logging: *graylog-logging

  ########## backend ##########
  webapi:
    container_name: webapi
    image: webapi
    profiles:
      - backend
    build:
      context: ../webapi
    environment:
      - NGINX_DOMAIN_NAME=${FP_DOMAIN_NAME:-fullplate.local}
      - BACKEND_PFX_PASSWORD=${FP_BACKEND_PFX_PASSWORD:-}
      - BACKEND_AWS_SES_ACCESS_KEY=${FP_AWS_SES_ACCESS_KEY:-changeme}
      - BACKEND_AWS_SES_SECRET_KEY=${FP_AWS_SES_SECRET_KEY:-changeme}
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-}
      - BACKEND_DATABASE_CONNECTION_STRING_NAME=${FP_DATABASE_CONNECTION_STRING_NAME}
      - NGINX_PROXY_HTTP_PORT=${FP_PROXY_HTTP_PORT:-10080}
      - BACKEND_EMAIL_SERVICE=${FP_EMAIL_SERVICE:-}
      - BACKEND_KEYCLOAK_WEBAPP_CLIENT_NAME=${FP_KC_WEBAPP_CLIENT_NAME:-}
      - BACKEND_KEYCLOAK_HOSTNAME=${FP_KEYCLOAK_HOSTNAME:-accounts.fullplate.local}
    volumes:
      - ../webapi/data/aspnet:/root/.aspnet
      - ../nginx/certbot/own_ca_certs:/own_ca_certs:ro
    network_mode: "host"
    logging: *graylog-logging

  webapi-api-test: # runs functional tests
    container_name: webapi-api-test
    image: webapi-api-test
    profiles:
      - api-tests
    build:
      context: ../webapi
      dockerfile: Dockerfile.api.test
    network_mode: "host"
    depends_on:
      - postgres-api-test
    logging: *graylog-logging

  webapi-e2e-test-server: # server for end-to-end tests
    container_name: webapi-e2e-test-server
    image: webapi-e2e-test-server
    profiles:
      - e2e-tests
    build:
      context: ../webapi
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-}
      - BACKEND_DATABASE_CONNECTION_STRING_NAME=${FP_DATABASE_CONNECTION_STRING_NAME:-e2e_test_db}
      - NGINX_PROXY_HTTP_PORT=${FP_PROXY_HTTP_PORT:-11080}
      - BACKEND_EMAIL_SERVICE=${FP_EMAIL_SERVICE:-FakeAwsSesService}
    network_mode: "host"
    depends_on:
      - postgres-e2e-test
      - nginx
    logging: *graylog-logging

  webapi-e2e-test: # runs end-to-end tests
    container_name: webapi-e2e-test
    image: webapi-e2e-test
    profiles:
      - e2e-tests
    build:
      context: ../webapi
      dockerfile: Dockerfile.e2e.test
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-}
      - BACKEND_DATABASE_CONNECTION_STRING_NAME=${FP_DATABASE_CONNECTION_STRING_NAME}
      - NGINX_PROXY_HTTP_PORT=${FP_PROXY_HTTP_PORT:-10080}
      - BACKEND_EMAIL_SERVICE=${FP_EMAIL_SERVICE:-}
    network_mode: "host"
    depends_on:
      - postgres-e2e-test
      - nginx
      - webapi-e2e-test-server
    logging: *graylog-logging

  ############ keycloak ############
  keycloak:
    container_name: keycloak
    image: keycloak
    profiles:
      - keycloak
    build:
      context: ../keycloak
      dockerfile: Dockerfile
      args:
        - FP_KEYCLOAK_DATABASE_PASSWORD=${FP_KEYCLOAK_DATABASE_PASSWORD:-changeme}
        - FP_KEYCLOAK_HOSTNAME=${FP_KEYCLOAK_HOSTNAME:-accounts.fullplate.local}
        - FP_KEYCLOAK_ADMIN_PASSWORD=${FP_KEYCLOAK_ADMIN_PASSWORD:-changeme}
    network_mode: "host"
    volumes:
      - ../nginx/certbot/own_ca_certs:/own_ca_certs:ro
    depends_on:
      - postgres-keycloak
    logging: *graylog-logging

  postgres-keycloak:
    container_name: postgres-keycloak
    profiles:
      - keycloak
    image: postgres:15.0
    command: -p 12432
    environment:
      - POSTGRES_USER=${FP_POSTGRES_KEYCLOAK_USER:-keycloak_db_user}
      - POSTGRES_PASSWORD=${FP_POSTGRES_PASSWORD:-changeme}
      - POSTGRES_DB=${FP_POSTGRES_DB:-keycloak_db}
    volumes:
      - ../keycloak/data:/var/lib/postgresql/data
    network_mode: "host"
    logging: *graylog-logging

  keycloak-dev:
    container_name: keycloak-dev
    profiles:
      - keycloak-dev
    build:
      context: ../keycloak
      dockerfile: Dockerfile.dev
      args:
        - FP_KEYCLOAK_DATABASE_PASSWORD=${FP_KEYCLOAK_DATABASE_PASSWORD:-changeme}
        - FP_KEYCLOAK_HOSTNAME=${FP_KEYCLOAK_HOSTNAME:-accounts.fullplate.local}
        - FP_KEYCLOAK_ADMIN_PASSWORD=${FP_KEYCLOAK_ADMIN_PASSWORD:-admin}
    volumes:
      - ../nginx/certbot/own_ca_certs:/own_ca_certs:ro
      - ../keycloak/providers/keycloak-restrict-client-auth.jar:/opt/keycloak/providers/keycloak-restrict-client-auth.jar:ro
    command: start-dev
    network_mode: "host"
    depends_on:
      - postgres-keycloak-dev
    logging: *graylog-logging

  postgres-keycloak-dev:
    container_name: postgres-keycloak-dev
    profiles:
      - keycloak-dev
    image: postgres:15.0
    command: -p 12432
    environment:
      - POSTGRES_USER=${FP_POSTGRES_KEYCLOAK_USER:-keycloak_db_user}
      - POSTGRES_PASSWORD=${FP_POSTGRES_PASSWORD:-changeme}
      - POSTGRES_DB=${FP_POSTGRES_DB:-keycloak_dev_db}
    volumes:
      - ../keycloak/dev_data:/var/lib/postgresql/data
    network_mode: "host"
    logging: *graylog-logging

  ########## graylog ##########
  graylog:
    container_name: graylog
    profiles:
      - graylog
    image: graylog/graylog-enterprise:6.0
    environment:
      - GRAYLOG_PASSWORD_SECRET=${FP_GRAYLOG_PASSWORD_SECRET:-changeme_minimum_16_characters}
      - GRAYLOG_ROOT_PASSWORD_SHA2=${FP_GRAYLOG_ROOT_PASSWORD_SHA2:-8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918} # default value is hash of "admin" password
      - GRAYLOG_HTTP_BIND_ADDRESS=0.0.0.0:9900
      - GRAYLOG_HTTP_PUBLISH_URI=https://127.0.0.1:9900/ # https://community.graylog.org/t/accessing-gui-using-internal-and-external-ip/11342/3
      - GRAYLOG_HTTP_EXTERNAL_URI=https://127.0.0.1:9900/
      - GRAYLOG_MONGODB_URI=mongodb://127.0.0.1/graylog
      - GRAYLOG_ELASTICSEARCH_HOSTS=http://127.0.0.1:9200 # fixes "No data nodes have been found"
      # GUI TLS settings
      - GRAYLOG_HTTP_ENABLE_TLS=true
      - GRAYLOG_HTTP_TLS_CERT_FILE=/own_ca_certs/${FP_OWN_CA_DOMAIN_NAME:-fullplate.local}.crt.pem
      - GRAYLOG_HTTP_TLS_KEY_FILE=/own_ca_certs/${FP_OWN_CA_DOMAIN_NAME:-fullplate.local}.key.pkcs8.pem
      - GRAYLOG_HTTP_TLS_KEY_PASSWORD=${FP_OWN_CA_PASSWORD:-}
    volumes:
      - ../graylog/graylog/data:/usr/share/graylog/data
      - ../nginx/certbot/own_ca_certs:/own_ca_certs:ro
      - ../graylog/graylog/cacerts.jks:/opt/java/openjdk/lib/security/cacerts
    network_mode: "host"
    depends_on:
      - mongo-graylog
      - opensearch
    logging: *graylog-logging

  mongo-graylog:
    container_name: mongo-graylog
    profiles:
      - graylog
    image: mongo:7.0.4
    volumes:
      - ../graylog/mongo/data:/data/db
    network_mode: "host"
    logging: *graylog-logging

  # https://opensearch.org/docs/latest/install-and-configure/install-opensearch/docker/
  opensearch:
    container_name: opensearch
    profiles:
      - graylog
    image: opensearchproject/opensearch:2.11.1
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=true
      - cluster.name=opensearch-cluster # Name the cluster
      - node.name=opensearch-node-1 # Name the node that will run in this container
      - bootstrap.memory_lock=true # Disable JVM heap memory swapping
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m" # Set min and max JVM heap sizes to at least 50% of system RAM
    volumes:
      - ../graylog/opensearch/data:/usr/share/opensearch/data
    network_mode: "host"
    logging: *graylog-logging

  ########## prometheus ##########
  prometheus:
    image: prom/prometheus:v2.50.0
    container_name: prometheus
    profiles:
      - prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ../prometheus/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../prometheus/prometheus/data:/prometheus
    network_mode: "host"
    logging: *graylog-logging

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.1
    container_name: cadvisor
    profiles:
      - exporters
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    command:
      - '-port=28080'
    network_mode: "host"
    logging: *graylog-logging

  node_exporter:
    image: quay.io/prometheus/node-exporter:v1.7.0
    container_name: node_exporter
    profiles:
      - exporters
    volumes:
      - '/:/host:ro,rslave'
    command:
      - '--path.rootfs=/host'
      - '--web.listen-address=:29100'
    pid: host
    network_mode: "host"
    logging: *graylog-logging

  grafana:
    image: grafana/grafana-oss:11.2.0
    container_name: grafana
    profiles:
      - prometheus
    volumes:
      - ../prometheus/grafana/data:/var/lib/grafana
      - ../nginx/certbot/own_ca_certs:/own_ca_certs:ro
      - ../prometheus/grafana/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro
    environment:
      - GF_SERVER_HTTP_PORT=23443
      - GF_SERVER_DOMAIN=${FP_GRAFANA_HOSTNAME:-metrics.fullplate.local}
      - GF_SERVER_ROOT_URL=https://${FP_GRAFANA_HOSTNAME:-metrics.fullplate.local}
      # GUI TLS settings
      - GF_SERVER_PROTOCOL=https
      - GF_SERVER_CERT_KEY=/own_ca_certs/${FP_OWN_CA_DOMAIN_NAME:-fullplate.local}.key
      - GF_SERVER_CERT_FILE=/own_ca_certs/${FP_OWN_CA_DOMAIN_NAME:-fullplate.local}.crt
      # SSO with Keycloak
      - GF_AUTH_GENERIC_OAUTH_ENABLED=true
      - GF_AUTH_GENERIC_OAUTH_NAME=accounts console
      - GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP=true
      - GF_AUTH_GENERIC_OAUTH_USE_REFRESH_TOKEN=true
      - GF_AUTH_GENERIC_OAUTH_CLIENT_ID=${FP_GRAFANA_CLIENT_ID:-grafana}
      - GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET=${FP_GRAFANA_CLIENT_SECRET:-}
      - GF_AUTH_GENERIC_OAUTH_SCOPES=openid email profile offline_access roles
      - GF_AUTH_GENERIC_OAUTH_EMAIL_ATTRIBUTE_PATH=email
      - GF_AUTH_GENERIC_OAUTH_LOGIN_ATTRIBUTE_PATH=preferred_username
      - GF_AUTH_GENERIC_OAUTH_NAME_ATTRIBUTE_PATH=full_name
      - GF_AUTH_GENERIC_OAUTH_AUTH_URL=https://${FP_KEYCLOAK_HOSTNAME:-accounts.fullplate.local}/realms/fullplate/protocol/openid-connect/auth
      - GF_AUTH_GENERIC_OAUTH_TOKEN_URL=https://${FP_KEYCLOAK_HOSTNAME:-accounts.fullplate.local}/realms/fullplate/protocol/openid-connect/token
      - GF_AUTH_GENERIC_OAUTH_API_URL=https://${FP_KEYCLOAK_HOSTNAME:-accounts.fullplate.local}/realms/fullplate/protocol/openid-connect/userinfo
      - GF_AUTH_GENERIC_OAUTH_SIGNOUT_REDIRECT_URL=https://${FP_KEYCLOAK_HOSTNAME:-accounts.fullplate.local}/realms/fullplate/protocol/openid-connect/logout?post_logout_redirect_uri=https%3A%2F%2F${FP_GRAFANA_HOSTNAME:-metrics.fullplate.local}%2Flogin
      - GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH=contains(resource_access.grafana.roles[*], 'GrafanaAdmin') && 'GrafanaAdmin' || contains(resource_access.grafana.roles[*], 'Admin') && 'Admin' || contains(resource_access.grafana.roles[*], 'Editor') && 'Editor' || contains(resource_access.grafana.roles[*], 'Viewer') && 'Viewer'
      - GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_STRICT=true
    network_mode: "host"
    logging: *graylog-logging
